{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","isRed","isOrange","isGreen","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","sortData","data","sort","a","b","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","columns","name","label","options","filter","customBodyRender","value","meta","update","src","alt","width","height","filterType","rowsPerPage","Table","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callback","tooltipItem","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","index","values","parseChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","buildChartData","casesData","recoveredData","deathsData","LineGraph","useState","setData","countryName","setCountryName","useEffect","fetch","then","response","json","timeline","fetchData","length","text","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","classes","makeStyles","option","fontSize","marginRight","useStyles","iso3","sortedData","getCountriesData","onCountryChange","e","countryCode","class","Autocomplete","id","autoHighlight","onChange","getOptionLabel","renderOption","Fragment","renderInput","params","TextField","variant","inputProps","autoComplete","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.88fed070.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({\r\n  title,\r\n  cases,\r\n  isRed,\r\n  isOrange,\r\n  isGreen,\r\n  active,\r\n  total,\r\n  ...props\r\n}) {\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      } ${isOrange && \"infoBox--orange\"} ${isGreen && \"infoBox--green\"}`}\r\n    >\r\n      <CardContent>\r\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n          {title}\r\n        </Typography>\r\n        <h2\r\n          className={`infoBox__cases ${\r\n            !isRed && !isOrange && \"infoBox__cases--green\"\r\n          }`}\r\n        >\r\n          {cases}\r\n        </h2>\r\n        <Typography className=\"infoBox__total\">{total} Total</Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgb(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgb(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgb(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          />\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from \"react\";\r\nimport { showDataOnMap } from \"./util\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\" https://www.openstreetmap.org/\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport numeral from \"numeral\";\r\nimport \"./Table.css\";\r\n\r\nconst columns = [\r\n  {\r\n    name: \"flag\",\r\n    label: \"Flag\",\r\n    options: {\r\n      filter: false,\r\n      sort: false,\r\n      customBodyRender: (value, meta, update) => (\r\n        <img src={value} alt=\"\" width=\"40\" height=\"25\" />\r\n      ),\r\n    },\r\n  },\r\n  {\r\n    name: \"country\",\r\n    label: \"Country\",\r\n    options: {\r\n      filter: true,\r\n      sort: true,\r\n    },\r\n  },\r\n  {\r\n    name: \"cases\",\r\n    label: \"Cases\",\r\n    options: {\r\n      filter: true,\r\n      sort: true,\r\n      customBodyRender: (value, meta, update) => numeral(value).format(\"0,0\"),\r\n    },\r\n  },\r\n  {\r\n    name: \"recovered\",\r\n    label: \"Recovered\",\r\n    options: {\r\n      filter: true,\r\n      sort: true,\r\n      customBodyRender: (value, meta, update) => numeral(value).format(\"0,0\"),\r\n    },\r\n  },\r\n  {\r\n    name: \"deaths\",\r\n    label: \"Deaths\",\r\n    options: {\r\n      filter: true,\r\n      sort: true,\r\n      customBodyRender: (value, meta, update) => numeral(value).format(\"0,0\"),\r\n    },\r\n  },\r\n];\r\n\r\nconst options = {\r\n  filterType: \"dropdown\",\r\n  rowsPerPage: 5,\r\n};\r\n\r\nexport default function Table({ countries }) {\r\n  return (\r\n    <MUIDataTable\r\n      title={\"Live cases by country\"}\r\n      data={countries.map((country) => {\r\n        return [\r\n          country.countryInfo.flag,\r\n          country.country,\r\n          country.cases,\r\n          country.recovered,\r\n          country.deaths,\r\n        ];\r\n      })}\r\n      columns={columns}\r\n      options={options}\r\n    />\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Card, CardContent } from \"@material-ui/core\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgb(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgb(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgb(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callback: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst parseChartData = (data, casesType) => {\r\n  let lastDataPoint;\r\n  const chartData = [];\r\n  for (let date in data) {\r\n    if (lastDataPoint) {\r\n      const newDataPoint = {\r\n        x: date,\r\n        y: data[date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nconst buildChartData = (data, casesType = \"cases\") => {\r\n  const casesData = parseChartData(data.cases, \"cases\");\r\n  const recoveredData = parseChartData(data.recovered, \"recovered\");\r\n  const deathsData = parseChartData(data.deaths, \"deaths\");\r\n\r\n  return [casesData, recoveredData, deathsData];\r\n};\r\n\r\nfunction LineGraph({ country = \"Worldwide\", ...props }) {\r\n  const [data, setData] = useState({\r\n    cases: [],\r\n    recovered: [],\r\n    deaths: [],\r\n  });\r\n  const [countryName, setCountryName] = useState(\"Worldwide\");\r\n\r\n  useEffect(() => {\r\n    const url =\r\n      country === \"Worldwide\"\r\n        ? \"https://disease.sh/v3/covid-19/historical/all?lastdays=120\"\r\n        : `https://disease.sh/v3/covid-19/historical/${country}?lastdays=120`;\r\n    const fetchData = async () => {\r\n      await fetch(url)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          if (country !== \"Worldwide\") {\r\n            setCountryName(data.country);\r\n            data = data.timeline;\r\n          }\r\n          const [casesData, recoveredData, deathsData] = buildChartData(\r\n            data,\r\n            country\r\n          );\r\n\r\n          setData({\r\n            cases: casesData,\r\n            recovered: recoveredData,\r\n            deaths: deathsData,\r\n          });\r\n          // setDeathsData(deaths);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [country]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data.cases?.length > 0 && (\r\n        <div className=\"graph__cards\">\r\n          <Card className=\"graph__card\">\r\n            <CardContent>\r\n              <Line\r\n                options={{\r\n                  ...options,\r\n                  title: {\r\n                    display: true,\r\n                    text: \"Cases: \" + countryName,\r\n                  },\r\n                }}\r\n                data={{\r\n                  datasets: [\r\n                    {\r\n                      data: data.cases,\r\n                      backgroundColor: casesTypeColors[\"cases\"].half_op,\r\n                      borderColor: casesTypeColors[\"cases\"].hex,\r\n                    },\r\n                  ],\r\n                }}\r\n              />\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card className=\"graph__card\">\r\n            <CardContent>\r\n              <Line\r\n                options={{\r\n                  ...options,\r\n                  title: {\r\n                    display: true,\r\n                    text: \"Recovered: \" + countryName,\r\n                  },\r\n                }}\r\n                data={{\r\n                  datasets: [\r\n                    {\r\n                      data: data.recovered,\r\n                      backgroundColor: casesTypeColors[\"recovered\"].half_op,\r\n                      borderColor: casesTypeColors[\"recovered\"].hex,\r\n                    },\r\n                  ],\r\n                }}\r\n              />\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card className=\"graph__card\">\r\n            <CardContent>\r\n              <Line\r\n                options={{\r\n                  ...options,\r\n                  title: {\r\n                    display: true,\r\n                    text: \"Deaths: \" + countryName,\r\n                  },\r\n                }}\r\n                data={{\r\n                  datasets: [\r\n                    {\r\n                      data: data.deaths,\r\n                      backgroundColor: casesTypeColors[\"deaths\"].half_op,\r\n                      borderColor: casesTypeColors[\"deaths\"].hex,\r\n                    },\r\n                  ],\r\n                }}\r\n              />\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from \"react\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport LineGraph from \"./LineGraph\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport \"./App.css\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"Worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({\n    lat: 34.80746,\n    lng: -40.4796,\n  });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const useStyles = makeStyles({\n    option: {\n      fontSize: 15,\n      \"& > span\": {\n        marginRight: 10,\n        fontSize: 20,\n      },\n    },\n  });\n\n  const classes = useStyles();\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso3,\n            flag: country.countryInfo.flag,\n          }));\n          countries.push({\n            name: \"Worldwide\",\n            value: \"Worldwide\",\n            flag:\n              \"https://cdn2.iconfinder.com/data/icons/pittogrammi/142/39-512.png\",\n          });\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n\n          setCountries(countries);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (e, country) => {\n    if (country === null) return;\n    const countryCode = country.value;\n    const url =\n      countryCode === \"Worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        if (countryCode !== \"Worldwide\") {\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n          setMapZoom(3);\n        } else {\n          setMapZoom(2);\n        }\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__mapContainer\">\n        <div className=\"app__header\">\n          <h1 class=\"main-heading\">\n            <span class=\"main-heading-primary\">Covid-19</span>\n            <span class=\"main-heading-secondary\">Tracker</span>\n          </h1>\n          <Autocomplete\n            id=\"country-select\"\n            className=\"app__dropdown\"\n            style={{ width: 300 }}\n            options={countries}\n            classes={{\n              option: classes.option,\n            }}\n            autoHighlight\n            onChange={onCountryChange}\n            getOptionLabel={(option) => option.name}\n            renderOption={(option) => (\n              <React.Fragment>\n                <span>\n                  <img src={option.flag} alt=\"\" width=\"20\" height=\"20\" />\n                </span>\n                {option.name}\n              </React.Fragment>\n            )}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                label=\"Choose a country\"\n                variant=\"outlined\"\n                inputProps={{\n                  ...params.inputProps,\n                  autoComplete: \"new-password\", // disable autocomplete and autofill\n                }}\n              />\n            )}\n          />\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            total={prettyPrintStat(countryInfo.cases)}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n          />\n          <InfoBox\n            isGreen\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            total={prettyPrintStat(countryInfo.recovered)}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n          />\n          <InfoBox\n            isOrange\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            total={prettyPrintStat(countryInfo.deaths)}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n          />\n        </div>\n\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <div className=\"app__TableChartContainer\">\n        <Card>\n          <CardContent class=\"table-chart-container\">\n            <Table className=\"app__table\" countries={tableData} />\n            <LineGraph className=\"app__graph\" country={country} />\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}